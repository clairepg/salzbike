shiny::runApp()
library(shiny)
library(leaflet)
library(sf)
library(dplyr)
library(lwgeom)
library(httr)
library(ggplot2)
library(htmltools)
?addPolylines()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
# Install if not already installed
if (!require(osmdata)) {
install.packages("osmdata")
}
# Load the package
library(osmdata)
shiny::runApp()
install.packages("sf")
chooseCRANmirror()
install.packages("sf")
install.packages("/path/to/downloaded/package/sf_1.0-14.tgz", repos = NULL, type = "source")
trails <- st_read("data/Wegenetz/wegenetz.shp")
library(shiny)
library(leaflet)
library(sf)
library(dplyr)
library(lwgeom)
library(httr)
library(ggplot2)
library(htmltools)
library(shinythemes)
library(thematic)
library(RColorBrewer)
trails <- st_read("data/Wegenetz/wegenetz.shp")
trails$Z_Min <- NULL
trails$Avg_Slope <- NULL
trails$Max_Slope <- NULL
trails <- st_read("data/Wegenetz/wegenetz.shp")
trails$Avg_Slope <- NULL
trails$Max_Slope <-NULL
trails$height_difference <- trails$Z_Max - trails$Z_Min
runApp()
shiny::runApp()
runApp()
runApp()
runApp()
setwd("~/Documents/salzbike")
# read in data --------------------------------------------------
rides <- read.csv("data/Bikingdata_Bundesland.csv")
hikes <- read.csv("data/Hikingdata_Bundesland.csv")
# set system locale to English so that the encoding is in utf-8
Sys.setlocale("LC_TIME", "English")
# check on NAs --------------------------------------------------------
sum(is.na(rides$date))
# give out wos where date is NA
rides[is.na(rides$date), ]
sum(is.na(hikes$date))
# give out wos where date is NA
hikes[is.na(hikes$date), ]
# Sum all total_trips for each unique edgeuid
total_trips_df <- rides %>%
group_by(edgeuid) %>%
summarise(total_trips = sum(total_trips))
write.csv(total_trips_df, "C:/Users/clair/Desktop/Masterarbeit/01_data/new/Totaltrips_Bikers_Bundesland.csv")
write.csv(total_trips_df, "data/Totaltrips_Bikers_Bundesland.csv")
# Calculate median average_speed for each unique edgeuid
average_speed_df <- rides %>%
group_by(edgeuid) %>%
summarise(median_average_speed = median(average_speed))
write.csv(average_speed_df, "data/AverageSpeed_Bikers_county.csv")
# Summary statistics for the year
yearly_summary_rides <- rides %>%
mutate(year = year(date)) %>%
group_by(edgeuid, year) %>%
summarise(total_trips = sum(total_trips), .groups = "drop")
write.csv(average_speed_df, "data/AverageSpeed_Bikers_Bundesland.csv")
# Summary statistics for the year
yearly_summary_rides <- rides %>%
mutate(year = year(date)) %>%
group_by(edgeuid, year) %>%
summarise(total_trips = sum(total_trips), .groups = "drop")
# Statistics Bikers ---------------------------------------------------------------
library(dplyr)
# Summary statistics for the year
yearly_summary_rides <- rides %>%
mutate(year = year(date)) %>%
group_by(edgeuid, year) %>%
summarise(total_trips = sum(total_trips), .groups = "drop")
library(lubridate)
# Summary statistics for the year
yearly_summary_rides <- rides %>%
mutate(year = year(date)) %>%
group_by(edgeuid, year) %>%
summarise(total_trips = sum(total_trips), .groups = "drop")
write.csv(yearly_summary_rides, "data/Yearlystats_bikers_Bundesland.csv")
# Summary statistics for hour of the day
hourly_summary_rides <- rides %>%
group_by(edgeuid, hour) %>%
summarise(total_trips = sum(total_trips), .groups = "drop")
write.csv(hourly_summary_rides, "data/Hourlystats_bikers_Bundesland.csv")
# Summary statistics for the month
monthly_summary_rides <- rides %>%
mutate(month = month(date, label = TRUE, abbr = FALSE)) %>% # Set abbr to FALSE to get full month names
group_by(edgeuid, month) %>%
summarise(total_trips = sum(total_trips), .groups = "drop")
write.csv(monthly_summary_rides, "data/Monthlystats_bikers_Bundesland.csv")
# Sum all total_trips for each unique edgeuid
total_trips_df <- hikes %>%
group_by(edgeuid) %>%
summarise(total_trips = sum(total_trips))
write.csv(total_trips_df, "data/Totaltrips_Hikers_Bundesland.csv")
# Calculate median average_speed for each unique edgeuid
average_speed_df <- hikes %>%
group_by(edgeuid) %>%
summarise(median_average_speed = median(average_speed))
write.csv(average_speed_df, "data/AverageSpeed_Hikers_Bundesland.csv")
yearly_summary_hikers <- hikes %>%
mutate(year = year(date)) %>%
group_by(edgeuid, year) %>%
summarise(total_trips = sum(total_trips), .groups = "drop")
write.csv(yearly_summary_hikers, "data/Yearlystats_hikers_Bundesland.csv")
# Summary statistics for weekdays
weekday_summary_hikers <- hikes %>%
mutate(weekday = wday(date, label = TRUE)) %>%
group_by(edgeuid, weekday) %>%
summarise(total_trips = sum(total_trips), .groups = "drop")
write.csv(weekday_summary_hikers, "data/Weekdaystats_hikers_Bundesland.csv")
# Summary statistics for hour of the day
hourly_summary_hikers <- hikes %>%
group_by(edgeuid, hour) %>%
summarise(total_trips = sum(total_trips), .groups = "drop")
write.csv(hourly_summary_hikers, "data/Hourlystats_hikers_Bundesland.csv")
monthly_summary_hikes <- hikes %>%
mutate(month = month(date, label = TRUE, abbr = FALSE)) %>% # Set abbr to FALSE to get full month names
group_by(edgeuid, month) %>%
summarise(total_trips = sum(total_trips), .groups = "drop")
write.csv(monthly_summary_hikes, "data/Monthlystats_hikers_Bundesland.csv")
runApp()
# Summary statistics for weekdays
weekday_summary_rides <- rides %>%
mutate(weekday = wday(date, label = TRUE)) %>%
group_by(edgeuid, weekday) %>%
summarise(total_trips = sum(total_trips), .groups = "drop")
write.csv(weekday_summary_rides, "data/Weekdaystats_bikers_Bundesland.csv")
runApp()
trails <- st_read("data/raw_wegenetz.shp")
# load libraries ---------------------------------------------------------
library(shiny)
library(leaflet)
library(sf)
library(dplyr)
library(lwgeom)
#library(httr)
library(ggplot2)
library(htmltools)
library(shinythemes)
library(thematic)
library(RColorBrewer)
library(shinyWidgets)
library(leaflet.extras)
# load data ---------------------------------------------------------------
trips_bikers <- read.csv("data/Bikingdata_nofilter_SegmentCount.csv")
trips_hikers <- read.csv("data/Hikingdata_nofilter_SegmentCount.csv")
trips_bikers$total_bikers <- trips_bikers$x
trips_bikers$x <- NULL
write.csv(hikingdataflat, "02_Activity_Data_processed/new_08_23/Bikingdata_nofilter_SegmentCount.csv")
write.csv(trips_bikers, "02_Activity_Data_processed/new_08_23/Bikingdata_nofilter_SegmentCount.csv")
setwd("~/Documents/masterarbeit")
write.csv(trips_bikers, "02_Activity_Data_processed/new_08_23/Bikingdata_nofilter_SegmentCount.csv")
write.csv(trips_bikers, "Bikingdata_nofilter_SegmentCount.csv")
trips_hikers$total_hikers <- trips_hikers$x
L
trips_hikers$x <- NULL
setwd("~/Documents/masterarbeit")
write.csv(trips_hikers, "02_Activity_Data_processed/new_08_23/Hikingdata_nofilter_SegmentCount.csv")
setwd("~/Documents/salzbike/data")
write.csv(trips_hikers, "Hikingdata_nofilter_SegmentCount.csv")
# load data ---------------------------------------------------------------
trips_bikers <- read.csv("data/Bikingdata_nofilter_SegmentCount.csv")
setwd("~/Documents/salzbike")
# load data ---------------------------------------------------------------
trips_bikers <- read.csv("data/Bikingdata_nofilter_SegmentCount.csv")
trips_hikers <- read.csv("data/Hikingdata_nofilter_SegmentCount.csv")
trips_bikers$total_bikers <- trips_bikers$x
trips_bikers$x <- NULL
trips_bikers$X <- NULL
write.csv(trips_bikers, "Bikingdata_nofilter_SegmentCount.csv")
trips_hikers$total_hikers <- trips_hikers$x
# load data ---------------------------------------------------------------
trips_bikers <- read.csv("data/Bikingdata_nofilter_SegmentCount.csv")
trips_hikers <- read.csv("data/Hikingdata_nofilter_SegmentCount.csv")
trips_hikers$X <- NULL
trips_hikers$X.1 <- NULL
write.csv(trips_hikers, "Hikingdata_nofilter_SegmentCount.csv")
trips_bikers <- read.csv("data/Bikingdata_nofilter_SegmentCount.csv")
trips_hikers <- read.csv("data/Hikingdata_nofilter_SegmentCount.csv")
trips_hikers$X <- NULL
trips_hikers$X.1 <- NULL
write.csv(trips_hikers, "Hikingdata_nofilter_SegmentCount.csv")
trips_bikers <- read.csv("data/Bikingdata_nofilter_SegmentCount.csv")
trips_hikers <- read.csv("data/Hikingdata_nofilter_SegmentCount.csv")
trails <- st_read("data/Wegenetz_unfiltered/Wegenetz_unfiltered.shp")
runApp()
