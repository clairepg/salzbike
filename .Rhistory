group_by(edgeuid) %>%
summarise(median_average_speed = median(average_speed))
write.csv(average_speed_df, "data/AverageSpeed_Hikers_Bundesland.csv")
yearly_summary_hikers <- hikes %>%
mutate(year = year(date)) %>%
group_by(edgeuid, year) %>%
summarise(total_trips = sum(total_trips), .groups = "drop")
write.csv(yearly_summary_hikers, "data/Yearlystats_hikers_Bundesland.csv")
# Summary statistics for weekdays
weekday_summary_hikers <- hikes %>%
mutate(weekday = wday(date, label = TRUE)) %>%
group_by(edgeuid, weekday) %>%
summarise(total_trips = sum(total_trips), .groups = "drop")
write.csv(weekday_summary_hikers, "data/Weekdaystats_hikers_Bundesland.csv")
# Summary statistics for hour of the day
hourly_summary_hikers <- hikes %>%
group_by(edgeuid, hour) %>%
summarise(total_trips = sum(total_trips), .groups = "drop")
write.csv(hourly_summary_hikers, "data/Hourlystats_hikers_Bundesland.csv")
monthly_summary_hikes <- hikes %>%
mutate(month = month(date, label = TRUE, abbr = FALSE)) %>% # Set abbr to FALSE to get full month names
group_by(edgeuid, month) %>%
summarise(total_trips = sum(total_trips), .groups = "drop")
write.csv(monthly_summary_hikes, "data/Monthlystats_hikers_Bundesland.csv")
runApp()
# Summary statistics for weekdays
weekday_summary_rides <- rides %>%
mutate(weekday = wday(date, label = TRUE)) %>%
group_by(edgeuid, weekday) %>%
summarise(total_trips = sum(total_trips), .groups = "drop")
write.csv(weekday_summary_rides, "data/Weekdaystats_bikers_Bundesland.csv")
runApp()
trails <- st_read("data/raw_wegenetz.shp")
# load libraries ---------------------------------------------------------
library(shiny)
library(leaflet)
library(sf)
library(dplyr)
library(lwgeom)
#library(httr)
library(ggplot2)
library(htmltools)
library(shinythemes)
library(thematic)
library(RColorBrewer)
library(shinyWidgets)
library(leaflet.extras)
# load data ---------------------------------------------------------------
trips_bikers <- read.csv("data/Bikingdata_nofilter_SegmentCount.csv")
trips_hikers <- read.csv("data/Hikingdata_nofilter_SegmentCount.csv")
trips_bikers$total_bikers <- trips_bikers$x
trips_bikers$x <- NULL
write.csv(hikingdataflat, "02_Activity_Data_processed/new_08_23/Bikingdata_nofilter_SegmentCount.csv")
write.csv(trips_bikers, "02_Activity_Data_processed/new_08_23/Bikingdata_nofilter_SegmentCount.csv")
setwd("~/Documents/masterarbeit")
write.csv(trips_bikers, "02_Activity_Data_processed/new_08_23/Bikingdata_nofilter_SegmentCount.csv")
write.csv(trips_bikers, "Bikingdata_nofilter_SegmentCount.csv")
trips_hikers$total_hikers <- trips_hikers$x
L
trips_hikers$x <- NULL
setwd("~/Documents/masterarbeit")
write.csv(trips_hikers, "02_Activity_Data_processed/new_08_23/Hikingdata_nofilter_SegmentCount.csv")
setwd("~/Documents/salzbike/data")
write.csv(trips_hikers, "Hikingdata_nofilter_SegmentCount.csv")
# load data ---------------------------------------------------------------
trips_bikers <- read.csv("data/Bikingdata_nofilter_SegmentCount.csv")
setwd("~/Documents/salzbike")
# load data ---------------------------------------------------------------
trips_bikers <- read.csv("data/Bikingdata_nofilter_SegmentCount.csv")
trips_hikers <- read.csv("data/Hikingdata_nofilter_SegmentCount.csv")
trips_bikers$total_bikers <- trips_bikers$x
trips_bikers$x <- NULL
trips_bikers$X <- NULL
write.csv(trips_bikers, "Bikingdata_nofilter_SegmentCount.csv")
trips_hikers$total_hikers <- trips_hikers$x
# load data ---------------------------------------------------------------
trips_bikers <- read.csv("data/Bikingdata_nofilter_SegmentCount.csv")
trips_hikers <- read.csv("data/Hikingdata_nofilter_SegmentCount.csv")
trips_hikers$X <- NULL
trips_hikers$X.1 <- NULL
write.csv(trips_hikers, "Hikingdata_nofilter_SegmentCount.csv")
trips_bikers <- read.csv("data/Bikingdata_nofilter_SegmentCount.csv")
trips_hikers <- read.csv("data/Hikingdata_nofilter_SegmentCount.csv")
trips_hikers$X <- NULL
trips_hikers$X.1 <- NULL
write.csv(trips_hikers, "Hikingdata_nofilter_SegmentCount.csv")
trips_bikers <- read.csv("data/Bikingdata_nofilter_SegmentCount.csv")
trips_hikers <- read.csv("data/Hikingdata_nofilter_SegmentCount.csv")
trails <- st_read("data/Wegenetz_unfiltered/Wegenetz_unfiltered.shp")
runApp()
shiny::runApp()
runApp()
setwd("~/Documents/salzbike")
# 0. load libraries ---------------------------------------------------------
library(shiny)
library(leaflet)
library(sf)
library(dplyr)
library(lwgeom)
#library(httr)
library(ggplot2)
library(htmltools)
library(shinythemes)
library(thematic)
library(RColorBrewer)
library(shinyWidgets)
library(leaflet.extras)
library(shinyjs)
library(feather)
library(htmlwidgets)
# 2. Read in trail data from shapefile------------------------------------------
# trail data filtered spatially to erase road segments in
# trail data filtered for only segments with recorded activity
# merged with activity data both hikers and bikers
# terrain features from 5m dgm
# code in which Shapefile is preprocessed: create_shapefile.R
trails <- st_read("data/Wegenetz/Wegenetz_withtrips.shp")
runApp()
runApp()
trails$m2 <- trails$km
trails$km <- trails$m
trails$m <- trails$m2
trails$m2 <- NULL
st_write(trails, "data/Wegenetz/Wegenetz_withterrain.shp")
runApp()
install.packages("shinycssloaders")
runApp()
runApp()
install.packages("leaflet.extras2")
runApp()
# 2. Read in trail data from shapefile------------------------------------------
# trail data filtered spatially to erase road segments in
# trail data filtered for only segments with recorded activity
# merged with activity data both hikers and bikers
# terrain features from 5m dgm
# code in which Shapefile is preprocessed: create_shapefile.R
trails <- st_read("data/Wegenetz/Wegenetz_withtrips.shp")
hours_bikers <- read_feather("data/Hourlystats_bikers_Bundesland.feather")
hours_hikers <- read_feather("data/Hourlystats_hikers_Bundesland.feather")
weekdays_bikers <- read_feather("data/Weekdaystats_bikers_Bundesland.feather")
weekdays_hikers <- read_feather("data/Weekdaystats_hikers_Bundesland.feather")
months_bikers <- read_feather("data/Monthlystats_bikers_Bundsland.feather")
months_hikers <- read_feather("data/Monthlystats_hikers_Bundsland.feather")
# Define the order of the levels
weekday_levels <- c("Mon", "Tue", "Wed", "Thu", "Fri", "Sat", "Sun")
month_levels <- c("January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December")
# Convert 'weekday' into an ordered factor
weekdays_bikers$weekday <- factor(weekdays_bikers$weekday, levels = weekday_levels, ordered = TRUE)
weekdays_hikers$weekday <- factor(weekdays_hikers$weekday, levels = weekday_levels, ordered = TRUE)
# Convert 'month' into an ordered factor
months_bikers$month <- factor(months_bikers$month, levels = month_levels, ordered = TRUE)
months_hikers$month <- factor(months_hikers$month, levels = month_levels, ordered = TRUE)
plot_hour_bikers <- ggplot(hours_bikers, aes(x = hour)) +
geom_bar(stat = "count") +
ggtitle("Overall Distribution of Hours for Bikers")
ggplot(hours_bikers, aes(x = hour)) +
geom_bar(stat = "count") +
ggtitle("Overall Distribution of Hours for Bikers")
ggplot(hours_bikers, aes(x = hour)) +
geom_bar(stat = "count") +
ggtitle("Overall Distribution of Hours for Bikers") +
theme(plot.title = element_text(size = 10))
runApp()
runApp()
ggplot(months_hikers, aes(x = month)) +
geom_bar(stat = "count") +
ggtitle("Overall Distribution of\nMonths for Hikers") +
theme(plot.title = element_text(size = 10)) +
scale_x_discrete(labels = function(x) substr(month.abb[match(x, month.name)], 1, 1))
runApp()
runApp()
runApp()
runApp()
runApp()
hours_bikers <- read_feather("data/Hourlystats_bikers_Bundesland.feather")
hours_hikers <- read_feather("data/Hourlystats_hikers_Bundesland.feather")
weekdays_bikers <- read_feather("data/Weekdaystats_bikers_Bundesland.feather")
weekdays_hikers <- read_feather("data/Weekdaystats_hikers_Bundesland.feather")
months_bikers <- read_feather("data/Monthlystats_bikers_Bundsland.feather")
months_hikers <- read_feather("data/Monthlystats_hikers_Bundsland.feather")
# Define the order of the levels
weekday_levels <- c("Mon", "Tue", "Wed", "Thu", "Fri", "Sat", "Sun")
month_levels <- c("January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December")
# Convert 'weekday' into an ordered factor
weekdays_bikers$weekday <- factor(weekdays_bikers$weekday, levels = weekday_levels, ordered = TRUE)
weekdays_hikers$weekday <- factor(weekdays_hikers$weekday, levels = weekday_levels, ordered = TRUE)
# Convert 'month' into an ordered factor
months_bikers$month <- factor(months_bikers$month, levels = month_levels, ordered = TRUE)
months_hikers$month <- factor(months_hikers$month, levels = month_levels, ordered = TRUE)
plot_hour_bikers <- ggplot(hours_bikers, aes(x = hour)) +
geom_bar(stat = "count") +
ggtitle("Overall Distribution of\nHours for Bikers") +
theme(plot.title = element_text(size = 10)) # Adjust the size value as per your preference
plot_hour_bikers
install.packages("magick")
plot_hour_bikers <- image_read("hour_bikers.png")
library(magick)
plot_hour_bikers <- image_read("hour_bikers.png")
# Plot for overall distribution of hours for hikers
plot_hour_hikers <- ggplot(hours_hikers, aes(x = hour)) +
geom_bar(stat = "count") +
ggtitle("Overall Distribution of\nHours for Hikers") +
theme(plot.title = element_text(size = 10))
plot_hour_hikers
ggplot(weekdays_bikers, aes(x = weekday)) +
geom_bar(stat = "count") +
ggtitle("Overall Distribution of\nWeekdays for Bikers") +
theme(plot.title = element_text(size = 10))
ggplot(weekdays_hikers, aes(x = weekday)) +
geom_bar(stat = "count") +
ggtitle("Overall Distribution of\nWeekdays for Hikers") +
theme(plot.title = element_text(size = 10))
ggplot(months_bikers, aes(x = month)) +
geom_bar(stat = "count") +
ggtitle("Overall Distribution of\n Months for Bikers") +
theme(plot.title = element_text(size = 10))+
scale_x_discrete(labels = function(x) substr(month.abb[match(x, month.name)], 1, 1))
ggplot(months_hikers, aes(x = month)) +
geom_bar(stat = "count") +
ggtitle("Overall Distribution of\nMonths for Hikers") +
theme(plot.title = element_text(size = 10)) +
scale_x_discrete(labels = function(x) substr(month.abb[match(x, month.name)], 1, 1))
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
citation("shinymaterial")
shiny::runApp()
setwd("~/Documents/masterarbeit")
trails200 <- st_read("filtered_data.shp")
trails200 <- st_read("filtered_data.shp")
View(trails200)
segments <- trails200$edgeuid
library(readr)
X01_Bikingdata_merged_unfiltered <- read_csv("02_Activity_Data_processed/01_Bikingdata_merged_unfiltered.csv")
View(X01_Bikingdata_merged_unfiltered)
# Filter the biking data for rows where edgeuid is in the segments list
filtered_bikingdata <- X01_Bikingdata_merged_unfiltered[X01_Bikingdata_merged_unfiltered$edge_uid %in% segments, ]
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
# 2. Read in trail data from shapefile------------------------------------------
# trail data filtered spatially to erase road segments in
# trail data filtered for only segments with recorded activity
# merged with activity data both hikers and bikers
# terrain features from 5m dgm
# code in which Shapefile is preprocessed: create_shapefile.R
trails <- st_read("Wegenetz_studyarea_activity.shp")
# 2. Read in trail data from shapefile------------------------------------------
# trail data filtered spatially to erase road segments in
# trail data filtered for only segments with recorded activity
# merged with activity data both hikers and bikers
# terrain features from 5m dgm
# code in which Shapefile is preprocessed: create_shapefile.R
trails <- st_read("Wegenetz_filtered_studyarea.shp")
trips <- read_feather("data/AllTrips_nofilter_SegmentCount.feather")
# 2. Read in trail data from shapefile------------------------------------------
# trail data filtered spatially to erase road segments in
# trail data filtered for only segments with recorded activity
# merged with activity data both hikers and bikers
# terrain features from 5m dgm
# code in which Shapefile is preprocessed: create_shapefile.R
trails <- st_read("Wegenetz_studyarea_activity.shp")
unique_values <- bind_rows(
trips %>% select(edgeuid) %>% distinct()
) %>% distinct(edgeuid)
unique_values_vector <- unique_values$edgeuid
trails_filtered <- trails[trails$edgeUID %in% unique_values_vector, ]
trails <- trails_filtered
#trails <- st_read("data/Wegenetz/wegenetz_update.shp")
trails$geometry <- st_zm(trails$geometry)
trails$edgeUID <- as.integer(trails$edgeUID)
trails$h_diff <- trails$Z_Max - trails$Z_Min
trails$m <- trails$m
trails$km <- trails$m/1000
#trails$km <- trails$m/1000
trails$Shape_Leng <- NULL
trails$grade <- (trails$h_diff / trails$m) * 100
trails$edgeuid <- trails$edgeUID
trails$edgeUID <- NULL
merged_trails <- trails %>%
inner_join(trips, by = "edgeuid")
merged_trails$bikers <- merged_trails$total_bikers
merged_trails$bikers_n <- merged_trails$total_bikers_normalized
merged_trails$hikers <- merged_trails$total_hikers
merged_trails$hikers_n <- merged_trails$total_hikers_normalized
merged_trails$conflict <- merged_trails$conflict_index
merged_trails$conflict_index <- NULL
merged_trails$total_bikers <- NULL
merged_trails$total_hikers <- NULL
merged_trails$total_bikers_normalized <- NULL
merged_trails$total_hikers_normalized <- NULL
st_write(merged_trails, "data/Wegenetz/Wegenetz_filtered_studyarea.shp")
# 2. Read in trail data from shapefile------------------------------------------
# trail data filtered spatially to erase road segments in
# trail data filtered for only segments with recorded activity
# merged with activity data both hikers and bikers
# terrain features from 5m dgm
# code in which Shapefile is preprocessed: create_shapefile.R
trails <- st_read("data/Wegenetz/Wegenetz_filtered_studyarea.shp")
runApp()
runApp()
runApp()
# 2. Read in trail data from shapefile------------------------------------------
# trail data filtered spatially to erase road segments in
# trail data filtered for only segments with recorded activity
# merged with activity data both hikers and bikers
# terrain features from 5m dgm
# code in which Shapefile is preprocessed: create_shapefile.R
trails <- st_read("data/Wegenetz/Wegenetz_raw_studyarea.shp")
# 2. Read in trail data from shapefile------------------------------------------
# trail data filtered spatially to erase road segments in
# trail data filtered for only segments with recorded activity
# merged with activity data both hikers and bikers
# terrain features from 5m dgm
# code in which Shapefile is preprocessed: create_shapefile.R
trails <- st_read("data/Wegenetz/Wegenetz_raw_activity_studyarea.shp")
runApp()
# 2. Read in trail data from shapefile------------------------------------------
# trail data filtered spatially to erase road segments in
# trail data filtered for only segments with recorded activity
# merged with activity data both hikers and bikers
# terrain features from 5m dgm
# code in which Shapefile is preprocessed: create_shapefile.R
trails <- st_read("data/Wegenetz/Wegenetz_raw_studyarea_all.shp")
runApp()
trails_raw <- st_read("data/Wegenetz_unfiltered/Wegenetz_unfiltered_studyarea.shp")
trips <- read_feather("data/AllTrips_nofilter_SegmentCount.feather")
View(trips)
trips$edgeuid <- as.factor(trips$edgeuid)
trails <- trails_raw
#trails <- st_read("data/Wegenetz/wegenetz_update.shp")
trails$geometry <- st_zm(trails$geometry)
trails$edgeUID <- as.integer(trails$edgeUID)
trails$h_diff <- trails$Z_Max - trails$Z_Min
trails$m <- trails$m
trails$km <- trails$m/1000
#trails$km <- trails$m/1000
trails$Shape_Leng <- NULL
trails$grade <- (trails$h_diff / trails$m) * 100
trails$edgeuid <- trails$edgeUID
trails$edgeUID <- NULL
# add trip data ----------------------------------------------------------------
trips <- read_feather("data/AllTrips_nofilter_SegmentCount.feather")
merged_trails <- trails %>%
inner_join(trips, by = "edgeuid")
merged_trails$bikers <- merged_trails$total_bikers
merged_trails$bikers_n <- merged_trails$total_bikers_normalized
merged_trails$hikers <- merged_trails$total_hikers
merged_trails$hikers_n <- merged_trails$total_hikers_normalized
merged_trails$conflict <- merged_trails$conflict_index
merged_trails$conflict_index <- NULL
merged_trails$total_bikers <- NULL
merged_trails$total_hikers <- NULL
merged_trails$total_bikers_normalized <- NULL
merged_trails$total_hikers_normalized <- NULL
st_write(merged_trails, "data/Wegenetz/Wegenetz_raw_studyarea.shp")
runApp()
shinyWidgets_version <- packageVersion("shinyWidgets")
leaflet_extras_version <- packageVersion("leaflet.extras")
shinyjs_version <- packageVersion("shinyjs")
feather_version <- packageVersion("feather")
htmlwidgets_version <- packageVersion("htmlwidgets")
# Print versions
cat("shinyWidgets Version:", shinyWidgets_version, "\n")
feather_version
htmlwidgets_version
shinyjs_version
# List of packages
packages <- c("plyr", "lubridate")
# Load the libraries
lapply(packages, library, character.only = TRUE)
# Print versions
sapply(packages, function(pkg) {
cat(pkg, "Version:", packageVersion(pkg), "\n")
})
# List of packages
packages <- c("plyr", "lubridate")
# Load the libraries
lapply(packages, library, character.only = TRUE)
# Print versions
sapply(packages, function(pkg) {
version_info <- as.character(packageVersion(pkg))
cat(pkg, "Version:", version_info, "\n")
})
packageVersion(lubridate)
library(plyr)
library(lubridate)
packageVersion(lubridate)
packageVersion("lubridate")
packgeVersion("plyr")
packageVersion("plyr")
library(readr)
X01_Bikingdata_merged_unfiltered <- read_csv("~/Documents/masterarbeit/02_Activity_Data_processed/01_Bikingdata_merged_unfiltered.csv")
View(X01_Bikingdata_merged_unfiltered)
data <- X01_Bikingdata_merged_unfiltered
data$males <- data$forward_male_people_count+data$reverse_male_people_count
data$females <- data$forward_female_people_count+data$reverse_female_people_count
data$count_18_34 <- data$forward_20_34_people_count+data$reverse_20_34_people_count
data$count_35_54 <- data$forward_35_54_people_count+ data$reverse_35_54_people_count
data$count_55_64 <- data$forward_55_64_people_count+data$reverse_55_64_people_count
data$count_64_plus <- data$forward_65_plus_people_count + data$reverse_65_plus_people_count
data$forward_20_34_people_count <- NULL
data$forward_35_54_people_count<- NULL
data$forward_55_64_people_count<- NULL
data$forward_65_plus_people_count<- NULL
data$reverse_20_34_people_count<- NULL
data$reverse_35_54_people_count<- NULL
data$reverse_55_64_people_count<- NULL
data$reverse_65_plus_people_count<- NULL
data$forward_male_people_count<- NULL
data$reverse_male_people_count<- NULL
data$forward_female_people_count<- NULL
data$reverse_female_people_count<- NULL
# Summing up data across all rows for age groups
age_data <- data.frame(
age_group = c("18-34", "35-54", "55-64", "64+"),
count = c(sum(data$count_18_34), sum(data$count_35_54), sum(data$count_55_64), sum(data$count_64_plus))
)
age_data_bikers <- age_data
library(readr)
X01_Hikingdata_merged_unfiltered <- read_csv("~/Documents/masterarbeit/02_Activity_Data_processed/01_Hikingdata_merged_unfiltered.csv")
View(X01_Hikingdata_merged_unfiltered)
data <- X01_Hikingdata_merged_unfiltered
data$males <- data$forward_male_people_count+data$reverse_male_people_count
data$females <- data$forward_female_people_count+data$reverse_female_people_count
data$count_18_34 <- data$forward_20_34_people_count+data$reverse_20_34_people_count
data$count_35_54 <- data$forward_35_54_people_count+ data$reverse_35_54_people_count
data$count_55_64 <- data$forward_55_64_people_count+data$reverse_55_64_people_count
data$count_64_plus <- data$forward_65_plus_people_count + data$reverse_65_plus_people_count
data$forward_20_34_people_count <- NULL
data$forward_35_54_people_count<- NULL
data$forward_55_64_people_count<- NULL
data$forward_65_plus_people_count<- NULL
data$reverse_20_34_people_count<- NULL
data$reverse_35_54_people_count<- NULL
data$reverse_55_64_people_count<- NULL
data$reverse_65_plus_people_count<- NULL
data$forward_male_people_count<- NULL
data$reverse_male_people_count<- NULL
data$forward_female_people_count<- NULL
data$reverse_female_people_count<- NULL
# Summing up data across all rows for age groups
age_data <- data.frame(
age_group = c("18-34", "35-54", "55-64", "64+"),
count = c(sum(data$count_18_34), sum(data$count_35_54), sum(data$count_55_64), sum(data$count_64_plus))
)
age_data_hikers <- age_data
# Add an activity column to each data frame
age_group_bikers$activity <- "Bikers"
# Add an activity column to each data frame
age_data_bikers$activity <- "Bikers"
age_data_hikers$activity <- "Hikers"
# Combine the two data frames
combined_age_data <- rbind(age_data_bikers, age_data_hikers)
ggplot(combined_age_data, aes(x = age_group, y = count, fill = activity)) +
geom_bar(stat = "identity", position = "dodge", width = 0.6) +
coord_flip() +
labs(title = "Age Groups for hiking and biking dataset (without spatial filter)", y = "Count", x = "Age Group") +
theme_minimal()
runApp()
shiny::runApp()
# 2. Read in trail data from shapefile------------------------------------------
# trail data filtered spatially to erase road segments in
# trail data filtered for only segments with recorded activity
# merged with activity data both hikers and bikers
# terrain features from 5m dgm
# code in which Shapefile is preprocessed: create_shapefile.R
trails <- st_read("data/Wegenetz/Wegenetz_raw_studyarea.shp")
trails <- trails[order(trails$conflict, decreasing = TRUE)]
trails <- trails[order(trails$conflict, decreasing = TRUE)]
trails <- trails[order(trails$conflict, decreasing = TRUE),]
head(trails, 100)
x <-head(trails, 100)
library(sf)
setwd("~/Documents/masterarbeit/thesis_data")
st_write(x, "conflict_top_100.shp")
x <-head(trails, 500)
# Sort the data frame by "conflict" column in descending order
sorted_data <- trails[order(trails$conflict, decreasing = TRUE), ]
# Calculate the cumulative sum of the "conflict" column
sorted_data$cum_km <- cumsum(sorted_data$km)
View(sorted_data)
# Select the top 200 kilometers
top_200_kilometers <- sorted_data[cum_km <= 200]
# Select the top 200 kilometers
top_200_kilometers <- sorted_data[sorted_data$cum_km <= 200]
# Select the top 200 kilometers
# Select the top 200 kilometers
top_200_kilometers <- sorted_data[sorted_data$cum_km <= 200, ]
st_write(top_200_kilometers, "conflict_top_200.shp")
trails_small <- trails[1:5000, ]
st_write(trails_small, "data/Wegenetz/Wegenetz_small.shp")
setwd("~/Documents/salzbike")
st_write(trails_small, "data/Wegenetz/Wegenetz_small.shp")
runApp()
runApp()
# 2. Read in trail data from shapefile------------------------------------------
# trail data filtered spatially to erase road segments in
# trail data filtered for only segments with recorded activity
# merged with activity data both hikers and bikers
# terrain features from 5m dgm
# code in which Shapefile is preprocessed: create_shapefile.R
trails <- st_read("data/Wegenetz/Wegenetz_small.shp")
runApp()
runApp()
